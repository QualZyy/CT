#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct person {
    char* _name;
    int _roomNumber;
    int _infected; 
};

struct person personRegister[40];
int registeredPersons = 0;

int deletePerson();
int appendToFile();
int registerPerson();
int whoIsInfected();
int registerContamination();
int closeRelations();
int pressEnter();
int readFromFile();

int main(){
    int exit = 0;
    while(!exit) {
        printf("\n\n\n-*-*-*-*-   CoronaTracker (CT)   -*-*-*-*-\n");
        printf("Enter corresponding number to what you want to do\n1.Register ");
        printf("new person\n2.Delete person\n3.Register infections\n4.Write to file\n5.Read from file");
        printf("\n6.Print Whole Database\n7.Who is infected?\n8.Who needs quaratine?\n9.Exit\n");

        int option;
        scanf("%i", &option);

        switch(option) {
            case 1: //Register new person
                if(registerPerson()) {
                    printf("Person was successfully added!");
                } else {
                    printf("An error occured");
                }
                pressEnter();
                break;

            case 2: //Delete person
                if (deletePerson()) {
                    printf("A person with the entered name was deleted");
                } else {
                    printf("No person with that name was found");
                }
                pressEnter();
                break;

            case 3: //Register contamination
                if (registerContamination()) {
                    printf("One person was registered as infected");
                } else {
                    printf("No person with that name was found");
                }
                pressEnter();
                break;

            case 4: //Write to file
                if (appendToFile()) {
                    printf("All persons were written to file");
                } else {
                    printf("An error occurred");
                }
                pressEnter();
                break;

            case 5: //Read from file
                readFromFile();
                pressEnter();
                break;

            case 6: //Print database
                for(int i = 0; i<registeredPersons; i++) {
                    printf("Person %i:\n", i+1);
                    printf("Name: %s\n", personRegister[i]._name);
                    printf("Room: %i\n", personRegister[i]._roomNumber);
                    printf("Infected: %i\n", personRegister[i]._infected);
                    printf("______________________\n");
                }
                pressEnter();
                break;

            case 7:  
                whoIsInfected(1);
                pressEnter();
                break;
            
             case 8:
                closeRelations("Hei");
                pressEnter();
                break;
            
             case 9:
                exit = 1;
                break;
            
            case 69:
                printf("Nice");
                pressEnter();
                break;

            default:
                printf("wtf");
                pressEnter();
                break;
        }
    }
    return 0;
}
int readFromFile() {
    /*char fileName[50];
    printf("Enter filename to the file for registering persons\nFILENAME.FILETYPE - Example: List.txt\n");
    scanf("%s", &fileName);
    int lengthName = strlen(fileName);
    char *file = malloc(lengthName+1);*/
    char line[50];

    printf("The file must me named input.txt and be in the root folder of the project\n");
    printf("(Same folder as main.c and main.exe)\n");
    pressEnter();

    FILE *f;
    f = fopen("input.txt", "r+");
    if(f == NULL) {
        printf("File could not be opened");
        return 0;
    }

    int i = 0;
    //fgets(line, 50, (FILE*) f);
    char *endPointer;

    while(fgets(line, 50, (FILE*) f)) {
        char *pch = malloc(52);
        pch = strtok(line, ",");
        int j = 0;
        while(pch != NULL) {
            if (j == 0) {
                int _nameLength = strlen(pch);
                personRegister[registeredPersons]._name = malloc(_nameLength+2);
                strcpy(personRegister[registeredPersons]._name, pch);
            }
            if (j == 1) {
                int roomNr = strtol(pch, &endPointer, 10);
                personRegister[registeredPersons]._roomNumber = roomNr;
            }
            if (j == 2) {
                int infectedState = strtol(pch, &endPointer, 10);
                personRegister[registeredPersons]._infected = infectedState;
            }

            pch = strtok(NULL, ",");
            j++;
        }
        registeredPersons++;
        i++;
        free(pch);
    }
    printf("%i persons were registered", i);
    return 1;
}

int deletePerson() {
    char name[50];
    printf("Enter name of the person you want to delete");
    scanf("%s", &name);;
    int lengthName = strlen(name);
    char *nameDelete = malloc(lengthName+1);
    strcpy(nameDelete, name);

    for(int i = 0; i<registeredPersons; i++) {
        if(!strcmp(personRegister[i]._name, nameDelete)) {
            personRegister[i]._infected = -1;
            strcpy(personRegister[i]._name, "Deleted");
            personRegister[i]._roomNumber = -1;
            return 1;
        }
    }
    return 0;
}

int registerContamination() {
    char name[50];
    printf("Enter the name of the infected patient\n");
    scanf("%s", &name);

    int lengthName = strlen(name);
    char *nameInfected = malloc(lengthName+1);
    strcpy(nameInfected, name);

    for(int i = 0; i<registeredPersons; i++) {
        if(!strcmp(personRegister[i]._name, nameInfected)) {
            personRegister[i]._infected = 1;
            return 1;
        }
    }
    return 0;
}

int registerPerson() {
    char name[50];
    printf("Enter name");
    scanf("%s", &name);
    printf("Enter room nr XXX");
    int roomNr;
    scanf("%i", &roomNr);

    int lengthName = strlen(name);
    personRegister[registeredPersons]._name = malloc(lengthName+1);

    strcpy(personRegister[registeredPersons]._name, name); 
    personRegister[registeredPersons]._roomNumber = roomNr;
    personRegister[registeredPersons]._infected = 0;  //Preset to 0;
    registeredPersons++;
    
    return 1;
}

int appendToFile (){
    printf("Output will be written to liste.txt\nThe file must exist");
    pressEnter();

    FILE *f;
    f = fopen("liste.txt", "a+");
    if (f == NULL) {
        printf("f e noll");
        return 0;
    }

    int writtenToFile = 0;
    int i;
    for(i = 0; i<registeredPersons; i++) {
        char roomNr[3];
        sprintf(roomNr, "%i", personRegister[i]._roomNumber);

        //Konvertere roomNr til char*, siden den gamle blir blank, av en eller annen grunn
        char* roomNra = malloc(4);
        strcpy(roomNra, roomNr);

        char infected[1];
        sprintf(infected, "%i", personRegister[i]._infected);

        int nameLength = strlen(personRegister[i]._name);
        int roomNrLength = strlen(roomNra);
        int infectedLength = strlen(infected);
        int totalLength =  nameLength + roomNrLength + infectedLength + 2*strlen(",") + strlen("\n");
        char* s = malloc(totalLength+1);

        sprintf(s, "%s,%s,%s\n", personRegister[i]._name, roomNra, infected);

        if (fprintf(f, "%s", s)) {
            writtenToFile++;
        }
        free(s);
    }

    if(writtenToFile == i) { //Hvis antallet personer skrevet til fil er likt antallet registrerte
        return 1;
    } else {
        return 0;
    }
}

int whoIsInfected(){
    printf("All infected personel\n---------------------------\n");

    for(int i=0; i < registeredPersons; i++){
        if (personRegister[i]._infected == 1)
            printf ("Name: %s                   Roomnumber: %i\n", personRegister[i]._name, personRegister[i]._roomNumber);   
    }
    return 1;

}

int closeRelations(){
    printf("All close relations\n---------------------------\n");

    for(int i=0; i < registeredPersons; i++){
        if (personRegister[i]._infected == 1){

            for(int j=0; j < registeredPersons; j++){
                if (personRegister[i]._roomNumber == personRegister[j]._roomNumber)
                    printf ("Name: %s                   Roomnumber: %i\n", personRegister[j]._name, personRegister[j]._roomNumber);   
           }}  
        }
 
    return 1;
}

int pressEnter(){
    printf("\n\nHit ANY KEY and ENTER to continue\n");
    char enter;
    for (int i = 1; i > 0; i++)
    {
        scanf("%s", &enter);
        break;
    }

}
