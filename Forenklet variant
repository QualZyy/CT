#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct person {
    char* _name;
    int _roomNumber;
    int _infected; 
};

struct person personRegister[40];
int registeredPersons = 0;

int appendToFile();
int registerPerson();
int whoIsInfected(int i);
//int closeRelations(int i, int j);

int main(){
    int exit = 0;
    while(!exit) {
        printf("\n\n\n-*-*-*-*-   CoronaTracker (CT)   -*-*-*-*-\n");
        printf("Enter corresponding number to what you want to do\n1.Register ");
        printf("new person\n2.Delete person\n3.Register infections\n4.Write to file\n5.Read from file");
        printf("\n6.Print Whole Database\n7.Who is infected?\n8.Who needs quaratine?\n9.Exit\n");

        int option;
        scanf("%i", &option);

        switch(option) {
            case 1: //Register new person

                if(registerPerson()) {
                    printf("Person was successfully added!");
                } else {
                    printf("An error occured");
                }
                break;

            case 2: //Delete person

                break;

            case 3: //Register contamination

                break;

            case 4: //Write to file
                appendToFile();
                
                break;

            case 5: //Read from file

                break;

            case 6: //Print database
                 
                for(int i = 0; i<registeredPersons; i++) {
                    printf("Person %i:\n", i+1);
                    printf("Name: %s\n", personRegister[i]._name);
                    printf("Room: %i\n", personRegister[i]._roomNumber);
                    printf("Infected: %i\n", personRegister[i]._infected);
                }
                break;

            case 7:  
                whoIsInfected(1);

                break;
            
             case 8:
                //closeRelations("Hei");

                break;
            
             case 9:
                exit = 1;
                break;
            
            case 69:
                printf("Nice");
                break;

            default:
                printf("wtf");
                break;
        }
    }
    return 0;
}

int registerPerson() {
    char name[50];
    printf("Enter name");
    scanf("%s", &name);
    printf("Enter room nr XXX");
    int roomNr;
    scanf("%i", &roomNr);

    int lengthName = strlen(name);
    personRegister[registeredPersons]._name = malloc(lengthName+1);

    strcpy(personRegister[registeredPersons]._name, name); //Skal vÃ¦re &name istedet?
    personRegister[registeredPersons]._roomNumber = roomNr;
    personRegister[registeredPersons]._infected = 0;  //Preset to 0;
    registeredPersons++;
    
    return 1;
}



int appendToFile (){
    FILE *f;
    f = fopen("Liste.txt", "a+");
    if (f == NULL) {
        printf("f e noll");
        return 0;
    }

    int writtenToFile = 0;
    int i;
    for(i = 0; i<registeredPersons; i++) {
        char roomNr[3];
        sprintf(roomNr, "%i", personRegister[i]._roomNumber);

        //Konvertere roomNr til char*, siden den gamle blir blank, av en eller annen grunn
        //C is love, kappa
        char* roomNra = malloc(4);
        strcpy(roomNra, roomNr);

        char infected[1];
        sprintf(infected, "%i", personRegister[i]._infected);

        int nameLength = strlen(personRegister[i]._name);
        int roomNrLength = strlen(roomNra);
        int infectedLength = strlen(infected);
        int totalLength =  nameLength + roomNrLength + infectedLength + 2*strlen(",") + strlen("\n");
        char* s = malloc(totalLength+1);

        sprintf(s, "%s,%s,%s\n", personRegister[i]._name, roomNra, infected);

        if (fprintf(f, "%s", s)) {
            writtenToFile++;
        }
        free(s);
    }

    if(writtenToFile == i) {
        return 1;
    } else {
        return 0;
    }
}
int whoIsInfected(int i){

    printf("All infected personel\n---------------------------\n");

    for(i=0; i < registeredPersons; i++){
        if (personRegister[i]._infected == 1)
            printf ("Name: %s                   Roomnumber: %i\n", personRegister[i]._name, personRegister[i]._roomNumber);   
    }
    return 1;

}
/*int closeRelations(int i, int j){
    printf("All close relations\n---------------------------\n");

    

    for(i=0; i < registeredPersons; i++){
        if (personRegister[i]._infected; == 1){

            for(j=0, j < registeredPersons; j++){
                if (personRegister[i]._roomNumber == personRegister[j]._roomNumber)
                    printf ("Name: %s                   Roomnumber: %i\n", personRegister[i]._name, personRegister[i]._roomNumber);   
           }}  
        }
 
    return 1;
}

