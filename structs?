#include <stdio.h>
#include <string.h>

int registerPerson(char*, long);
int deletePerson();
int registerRoom();
int deleteRoom();
int registerContamination();
int registerVisit();
int writeToFile();
int readFromFile();

//Person struct
struct person {
    char _name[40];
    long _birthdate;
    int _infected;      //TRUE OR FALSE
    long int _date;
    double _time;
};


//Room visits struct
struct rooms {
    struct person _visitors[900];
    long int _when[900];    
};

struct person personRegister[1000]; //Register of all registered people
int registeredPersons = 0;

int main() {
    int exit = 0;
    while(!exit) {
        printf("\n\n\n-*-*-*-*-   CoronaTracker (CT)   -*-*-*-*-\n");
        printf("Enter corresponding number to what you want to do\n1.Register ");
        printf("new person\n2.Delete person\n3.Register new room\n4.Delete room\n5.Register contamination");
        printf("\n6.Register visit\n7.Write to file\n8.Read from file\n9.Exit\n");

        int option;
        scanf("%i", &option);

        switch(option) {
            case 1: //Register new person
                printf("Enter name");
                char name[40];
                scanf("%s", &name);
                printf("Enter date of birth YYYYMMDD");
                long birthDate;
                scanf("%li", &birthDate);
                
                if(registerPerson(name, birthDate)) {
                    printf("Person was successfully added!");
                } else {
                    printf("An error occured");
                }
                break;

            case 2: //Delete person

                break;

            case 3: //Register room

                break;

            case 4: //Delete room

                break;

            case 5: //Register contamination

                break;

            case 6: //Register a visit

                break;

            case 7: //Write to file

                break;

            case 8: //Read from file

                break;

            case 9:
                exit = 1;
                break;

            case 69:
                printf("Nice");
                break;

            default:
                printf("wtf");
                break;
        }
    }
    return 0;
}

int registerPerson(char name[40], long dateOfBirth) {
    if(name == "" || dateOfBirth <= 0) {
        return 0;
    }
    strcpy(personRegister[registeredPersons]._name, name);
    personRegister[registeredPersons]._birthdate = dateOfBirth;
    registeredPersons++;
    return 1;
}

int readFromFile() {
     FILE *CTeks;

    char *buf = malloc(MAX_STR_LEN);
    char *tmp;

     if (buf == NULL) {
        printf ("No memory\n");
        return 1;
    }
     if ( ( CTeks = fopen( "klasse.txt", "r" ) ) == NULL ) //Reading a file
    {
        printf( "File could not be opened.\n" );
    }

    int i = 0;
    while (fgets(buf, 255, CTeks) != NULL)
    {
        if ((strlen(buf)>0) && (buf[strlen (buf) - 1] == '\n'))
            buf[strlen (buf) - 1] = '\0';       

        tmp = strtok(buf, ";");
        person[i].name = strd(tmp);

        tmp = strtok(NULL, ";");
        person[i].birthdate = strd(tmp);

        i++;
    }
    fclose(CTeks);
    return 0;
}
